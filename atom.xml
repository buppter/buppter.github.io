<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Buppter</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://buppter.xyz/"/>
  <updated>2019-07-20T08:59:17.361Z</updated>
  <id>https://buppter.xyz/</id>
  
  <author>
    <name>buppter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL 锁机制</title>
    <link href="https://buppter.xyz/2019/07/20/MySQL-%E9%94%81%E6%9C%BA%E5%88%B6/"/>
    <id>https://buppter.xyz/2019/07/20/MySQL-锁机制/</id>
    <published>2019-07-20T08:50:46.000Z</published>
    <updated>2019-07-20T08:59:17.361Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Sat Jul 20 2019 16:59:26 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;锁定机制的优劣直接应想到一个数据库系统的并发处理能力和性能，所以锁定机制的实现也就成为了各种数据库的核心技术之一。本章将对 MySQL 中两种使用最为频繁的存储引擎 &lt;code&gt;MyISAM&lt;/code&gt; 和 &lt;code&gt;InnoDB&lt;/code&gt; 各自的锁定机制进行较为详细的分析。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://buppter.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://buppter.xyz/tags/MySQL/"/>
    
      <category term="锁" scheme="https://buppter.xyz/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 慢查询日志</title>
    <link href="https://buppter.xyz/2019/07/20/MySQL-%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/"/>
    <id>https://buppter.xyz/2019/07/20/MySQL-慢查询日志/</id>
    <published>2019-07-20T08:50:31.000Z</published>
    <updated>2019-07-20T09:05:32.853Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Sat Jul 20 2019 17:06:06 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;MySQL 的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过 &lt;code&gt;long_query_time&lt;/code&gt; 值的SQL，则会被记录到慢查询日志中。 &lt;code&gt;long_query_time&lt;/code&gt; 的默认值为 10，意思是运行 10s 以上的语句。默认情况下，MySQL 数据库并不启动慢查询日志，需要我们手动来设置这个参数，当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件，也支持将日志记录写入数据库表。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://buppter.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://buppter.xyz/tags/MySQL/"/>
    
      <category term="慢查询日志" scheme="https://buppter.xyz/tags/%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 批量数据脚本</title>
    <link href="https://buppter.xyz/2019/07/20/MySQL-%E6%89%B9%E9%87%8F%E6%95%B0%E6%8D%AE%E8%84%9A%E6%9C%AC/"/>
    <id>https://buppter.xyz/2019/07/20/MySQL-批量数据脚本/</id>
    <published>2019-07-20T08:50:12.000Z</published>
    <updated>2019-07-20T08:56:45.627Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Sat Jul 20 2019 16:58:18 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;使用脚本进行大数据量的批量插入，对特定情况下测试数据集的建立非常有用。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://buppter.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://buppter.xyz/tags/MySQL/"/>
    
      <category term="数据脚本" scheme="https://buppter.xyz/tags/%E6%95%B0%E6%8D%AE%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 查询优化</title>
    <link href="https://buppter.xyz/2019/07/20/MySQL-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
    <id>https://buppter.xyz/2019/07/20/MySQL-查询优化/</id>
    <published>2019-07-20T08:46:36.000Z</published>
    <updated>2019-07-20T09:04:07.449Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Sat Jul 20 2019 17:06:06 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;上篇文章主要讲了对数据库索引的优化，除了对索引的优化外，查询优化也同样重要。这篇文章主要讲解对查询的优化。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://buppter.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://buppter.xyz/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://buppter.xyz/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="数据库优化" scheme="https://buppter.xyz/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>数据库索引优化</title>
    <link href="https://buppter.xyz/2019/07/16/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/"/>
    <id>https://buppter.xyz/2019/07/16/数据库索引优化/</id>
    <published>2019-07-16T15:14:46.000Z</published>
    <updated>2019-07-18T16:03:14.679Z</updated>
    
    <summary type="html">
    
      &lt;!-- build time:Sat Jul 20 2019 16:58:18 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;对于数据库的优化主要包括三个部分：查询优化、索引优化和字段类型优化，其中，索引优化则是数据库优化的重中之重。一个查询使用索引与不使用索引的差别可能只在100个数量级，而一个好的索引与不好的索引差别可能在1000个数量级，但是一个最优的索引与普通的索引查询效率可能就相差上万甚至更高的数量级。本文主要重点讲解数据库索引的优化。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://buppter.xyz/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MySQL" scheme="https://buppter.xyz/tags/MySQL/"/>
    
      <category term="数据库" scheme="https://buppter.xyz/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="索引" scheme="https://buppter.xyz/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
</feed>
